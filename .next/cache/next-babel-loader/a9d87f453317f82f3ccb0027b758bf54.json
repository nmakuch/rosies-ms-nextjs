{"ast":null,"code":"import _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nvar __jsx = React.createElement;\nimport React from \"react\";\nimport { Formik } from \"formik\";\n\nvar Form = function Form() {\n  return __jsx(\"section\", {\n    id: \"contact-form\"\n  }, __jsx(\"div\", {\n    className: \"container\"\n  }, __jsx(\"h1\", null, \"Anywhere in your app!\"), __jsx(Formik, {\n    initialValues: {\n      email: \"\",\n      password: \"\"\n    },\n    validate: function validate(values) {\n      var errors = {};\n\n      if (!values.email) {\n        errors.email = \"Required\";\n      } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i.test(values.email)) {\n        errors.email = \"Invalid email address\";\n      }\n\n      return errors;\n    },\n    onSubmit: function onSubmit(values, _ref) {\n      var setSubmitting = _ref.setSubmitting;\n      setTimeout(function () {\n        alert(_JSON$stringify(values, null, 2));\n        setSubmitting(false);\n      }, 400);\n    }\n  }, function (_ref2) {\n    var values = _ref2.values,\n        errors = _ref2.errors,\n        touched = _ref2.touched,\n        handleChange = _ref2.handleChange,\n        handleBlur = _ref2.handleBlur,\n        handleSubmit = _ref2.handleSubmit,\n        isSubmitting = _ref2.isSubmitting;\n    return __jsx(\"form\", {\n      onSubmit: handleSubmit\n    }, __jsx(\"label\", null, \"email\"), __jsx(\"input\", {\n      type: \"email\",\n      name: \"email\",\n      onChange: handleChange,\n      onBlur: handleBlur,\n      value: values.email\n    }), errors.email && touched.email && errors.email, __jsx(\"label\", null, \"password\"), __jsx(\"input\", {\n      type: \"password\",\n      name: \"password\",\n      onChange: handleChange,\n      onBlur: handleBlur,\n      value: values.password\n    }), errors.password && touched.password && errors.password, __jsx(\"button\", {\n      type: \"submit\",\n      disabled: isSubmitting\n    }, \"Submit\"));\n  })));\n};\n\nexport default Form;","map":{"version":3,"sources":["/Users/nickmakuch/Documents/Code/rosies-ms-nextjs/components/Form.js"],"names":["React","Formik","Form","email","password","values","errors","test","setSubmitting","setTimeout","alert","touched","handleChange","handleBlur","handleSubmit","isSubmitting"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,MAAT,QAAuB,QAAvB;;AAEA,IAAMC,IAAI,GAAG,SAAPA,IAAO;AAAA,SACX;AAAS,IAAA,EAAE,EAAC;AAAZ,KACE;AAAK,IAAA,SAAS,EAAC;AAAf,KACE,0CADF,EAEE,MAAC,MAAD;AACE,IAAA,aAAa,EAAE;AAAEC,MAAAA,KAAK,EAAE,EAAT;AAAaC,MAAAA,QAAQ,EAAE;AAAvB,KADjB;AAEE,IAAA,QAAQ,EAAE,kBAAAC,MAAM,EAAI;AAClB,UAAMC,MAAM,GAAG,EAAf;;AACA,UAAI,CAACD,MAAM,CAACF,KAAZ,EAAmB;AACjBG,QAAAA,MAAM,CAACH,KAAP,GAAe,UAAf;AACD,OAFD,MAEO,IACL,CAAC,2CAA2CI,IAA3C,CAAgDF,MAAM,CAACF,KAAvD,CADI,EAEL;AACAG,QAAAA,MAAM,CAACH,KAAP,GAAe,uBAAf;AACD;;AACD,aAAOG,MAAP;AACD,KAZH;AAaE,IAAA,QAAQ,EAAE,kBAACD,MAAD,QAA+B;AAAA,UAApBG,aAAoB,QAApBA,aAAoB;AACvCC,MAAAA,UAAU,CAAC,YAAM;AACfC,QAAAA,KAAK,CAAC,gBAAeL,MAAf,EAAuB,IAAvB,EAA6B,CAA7B,CAAD,CAAL;AACAG,QAAAA,aAAa,CAAC,KAAD,CAAb;AACD,OAHS,EAGP,GAHO,CAAV;AAID;AAlBH,KAoBG;AAAA,QACCH,MADD,SACCA,MADD;AAAA,QAECC,MAFD,SAECA,MAFD;AAAA,QAGCK,OAHD,SAGCA,OAHD;AAAA,QAICC,YAJD,SAICA,YAJD;AAAA,QAKCC,UALD,SAKCA,UALD;AAAA,QAMCC,YAND,SAMCA,YAND;AAAA,QAOCC,YAPD,SAOCA,YAPD;AAAA,WAUC;AAAM,MAAA,QAAQ,EAAED;AAAhB,OACE,6BADF,EAEE;AACE,MAAA,IAAI,EAAC,OADP;AAEE,MAAA,IAAI,EAAC,OAFP;AAGE,MAAA,QAAQ,EAAEF,YAHZ;AAIE,MAAA,MAAM,EAAEC,UAJV;AAKE,MAAA,KAAK,EAAER,MAAM,CAACF;AALhB,MAFF,EASGG,MAAM,CAACH,KAAP,IAAgBQ,OAAO,CAACR,KAAxB,IAAiCG,MAAM,CAACH,KAT3C,EAUE,gCAVF,EAWE;AACE,MAAA,IAAI,EAAC,UADP;AAEE,MAAA,IAAI,EAAC,UAFP;AAGE,MAAA,QAAQ,EAAES,YAHZ;AAIE,MAAA,MAAM,EAAEC,UAJV;AAKE,MAAA,KAAK,EAAER,MAAM,CAACD;AALhB,MAXF,EAkBGE,MAAM,CAACF,QAAP,IAAmBO,OAAO,CAACP,QAA3B,IAAuCE,MAAM,CAACF,QAlBjD,EAmBE;AAAQ,MAAA,IAAI,EAAC,QAAb;AAAsB,MAAA,QAAQ,EAAEW;AAAhC,gBAnBF,CAVD;AAAA,GApBH,CAFF,CADF,CADW;AAAA,CAAb;;AA+DA,eAAeb,IAAf","sourcesContent":["import React from \"react\";\nimport { Formik } from \"formik\";\n\nconst Form = () => (\n  <section id=\"contact-form\">\n    <div className=\"container\">\n      <h1>Anywhere in your app!</h1>\n      <Formik\n        initialValues={{ email: \"\", password: \"\" }}\n        validate={values => {\n          const errors = {};\n          if (!values.email) {\n            errors.email = \"Required\";\n          } else if (\n            !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i.test(values.email)\n          ) {\n            errors.email = \"Invalid email address\";\n          }\n          return errors;\n        }}\n        onSubmit={(values, { setSubmitting }) => {\n          setTimeout(() => {\n            alert(JSON.stringify(values, null, 2));\n            setSubmitting(false);\n          }, 400);\n        }}\n      >\n        {({\n          values,\n          errors,\n          touched,\n          handleChange,\n          handleBlur,\n          handleSubmit,\n          isSubmitting\n          /* and other goodies */\n        }) => (\n          <form onSubmit={handleSubmit}>\n            <label>email</label>\n            <input\n              type=\"email\"\n              name=\"email\"\n              onChange={handleChange}\n              onBlur={handleBlur}\n              value={values.email}\n            />\n            {errors.email && touched.email && errors.email}\n            <label>password</label>\n            <input\n              type=\"password\"\n              name=\"password\"\n              onChange={handleChange}\n              onBlur={handleBlur}\n              value={values.password}\n            />\n            {errors.password && touched.password && errors.password}\n            <button type=\"submit\" disabled={isSubmitting}>\n              Submit\n            </button>\n          </form>\n        )}\n      </Formik>\n    </div>\n  </section>\n);\n\nexport default Form;\n"]},"metadata":{},"sourceType":"module"}